/**
* This file is used as entry point from Java. It is used to implement the native methods.
* It include de file OSApiAdapter.h which is generated by the command javac -h . OSApiAdapter in the parent folder.
*
* \file EntryPointJNI.cpp
* \author Romain Agostinelli
* \date 02.11.2020
*/
#include "MacOSNativeApiAdapter.hpp"
#include "../OSApiAdapter.h"
#include "data.h"
#include <iostream>


static bool exceptionHandler(JNIEnv * env, std::string text) {
    jboolean flag = env->ExceptionCheck();
    bool res = false;
    if (flag) {
        std::cout<<"Exception detected in Native Code"<<std::endl;
        env->ExceptionClear(); // Clear exceptions
        jclass jcls = env->FindClass("NativeException");
        env->ThrowNew(jcls, text.c_str());
        res = true;
    }
    return res;
}

/**
* Implementation of: OSApiAdapter::getOsVersion.
* \return jobject, OperatingSystemVersion java object.
*/
JNIEXPORT jobject JNICALL Java_OSApiAdapter_getOsVersion
        (JNIEnv *env, jobject thisObject) 	{
    jclass cls = env->FindClass("OperatingSystemVersion");
    if(exceptionHandler(env, "Cannot find the class OperatingSystemVersion")) return NULL;

    jmethodID cid = env->GetMethodID(cls, "<init>", "(III)V");
    if(exceptionHandler(env, "Cannot find the constructor of OperatingSystemVersion")) return NULL;

    MacOSNativeApiAdapter pi;
    OSVersion version = pi.getVersion();
    return env->NewObject(cls, cid, version.major, version.minor, version.patch);
}